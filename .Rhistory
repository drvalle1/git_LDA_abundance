rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\GIT_models\\git_LDA_abundance')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\GIT_models\\git_LDA_abundance\\phi given theta')
source('estimate phi given theta function.R')
#get data
setwd('U:\\GIT_models\\git_LDA_abundance')
dat=read.csv('fake data5.csv',as.is=T)
ind=which(colnames(dat)=='X')
y=data.matrix(dat[,-ind]); dim(y)
nspp=ncol(y)
ncomm=5
nloc=nrow(y)
#get theta
setwd('U:\\GIT_models\\git_LDA_abundance')
theta=read.csv('theta true.csv',as.is=T)
npost=1000
theta.post=matrix(unlist(theta),npost,ncomm*nloc)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\GIT_models\\git_LDA_abundance')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\GIT_models\\git_LDA_abundance\\phi given theta')
source('estimate phi given theta function.R')
#get data
setwd('U:\\GIT_models\\git_LDA_abundance')
dat=read.csv('fake data5.csv',as.is=T)
ind=which(colnames(dat)=='X')
y=data.matrix(dat[,-ind]); dim(y)
nspp=ncol(y)
ncomm=5
nloc=nrow(y)
#get theta
setwd('U:\\GIT_models\\git_LDA_abundance')
theta=read.csv('theta true.csv',as.is=T)
npost=1000
theta.post=matrix(unlist(theta),npost,ncomm*nloc)
#run folding operation
ngibbs=1000
nburn=ngibbs/2
psi=0.1
res=phi.given.theta(y=y,ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,
theta.post=theta.post,psi=psi)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\GIT_models\\git_LDA_abundance')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\GIT_models\\git_LDA_abundance\\phi given theta')
source('estimate phi given theta function.R')
#get data
setwd('U:\\GIT_models\\git_LDA_abundance')
dat=read.csv('fake data5.csv',as.is=T)
ind=which(colnames(dat)=='X')
y=data.matrix(dat[,-ind]); dim(y)
nspp=ncol(y)
ncomm=5
nloc=nrow(y)
#get theta
setwd('U:\\GIT_models\\git_LDA_abundance')
theta=read.csv('theta true.csv',as.is=T)
npost=1000
theta.post=matrix(unlist(theta),npost,ncomm*nloc)
#run folding operation
ngibbs=1000
nburn=ngibbs/2
psi=0.1
nspp=ncol(y)
nloc=nrow(y)
#useful stuff
hi=0.999999
lo=0.000001
#initial value
phi=matrix(1/nspp,ncomm,nspp)
npost=nrow(theta.post)
ind=sample(1:npost,size=1)
ncomm.init=ncol(theta.post)/nloc
tmp=matrix(theta.post[ind,],nloc,ncomm.init)
theta=tmp[,1:ncomm]
#gibbs details
phi.out=matrix(NA,ngibbs,ncomm*nspp)
llk=rep(NA,ngibbs)
# log.prior=rep(NA,ngibbs)
options(warn=2)
zeroes=array(0,dim=c(nloc,nspp,ncomm))
#sample z
tmp=samplez(theta=theta, phi=phi, y=y, ncommun=ncomm, nloc=nloc, nspp=nspp, zeroes=zeroes)
array.lsk=tmp$ArrayLSK
nlk=tmp$nlk
# nlk=nlk.true
nks=tmp$nks
# nks=nks.true
#get parameters
phi=rdirichlet1(alpha=nks+psi,ncomm=ncomm,nspp=nspp)
#get theta
ind=sample(1:npost,size=1)
tmp=matrix(theta.post[ind,],nloc,ncomm.init)
theta=tmp[,1:ncomm]
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\GIT_models\\git_LDA_abundance')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\GIT_models\\git_LDA_abundance\\phi given theta')
source('estimate phi given theta function.R')
#get data
setwd('U:\\GIT_models\\git_LDA_abundance')
dat=read.csv('fake data5.csv',as.is=T)
ind=which(colnames(dat)=='X')
y=data.matrix(dat[,-ind]); dim(y)
nspp=ncol(y)
ncomm=5
nloc=nrow(y)
#get theta
setwd('U:\\GIT_models\\git_LDA_abundance')
theta=read.csv('theta true.csv',as.is=T)
npost=1000
theta.post=matrix(unlist(theta),npost,ncomm*nloc)
#run folding operation
ngibbs=1000
nburn=ngibbs/2
psi=0.1
res=phi.given.theta(y=y,ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,
theta.post=theta.post,psi=psi)
plot(res$llk,type='l')
seq1=1:nrow(res$phi)
phi=colMeans(res$phi[seq1,])
phi1=matrix(phi,ncol(theta),ncol(y))
plot(res$llk,type='l')
seq1=1:nrow(res$phi)
phi=colMeans(res$phi[seq1,])
phi1=matrix(phi,ncol(theta),ncol(y))
phi.true=data.matrix(read.csv('phi true.csv',as.is=T))
plot(phi1,phi.true)
hist(phi1-phi.true)
phi.true=data.matrix(read.csv('phi true.csv',as.is=T))
plot(phi1,phi.true)
theta.post=matrix(unlist(theta),npost,ncomm*nloc,byrow=T)
#run folding operation
ngibbs=1000
nburn=ngibbs/2
psi=0.1
res=phi.given.theta(y=y,ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,
theta.post=theta.post,psi=psi)
plot(res$llk,type='l')
seq1=1:nrow(res$phi)
phi=colMeans(res$phi[seq1,])
phi1=matrix(phi,ncol(theta),ncol(y))
phi.true=data.matrix(read.csv('phi true.csv',as.is=T))
plot(phi1,phi.true)
hist(phi1-phi.true)
plot(phi1,phi.true)
hist(phi1-phi.true)
