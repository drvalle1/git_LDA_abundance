setwd('U:\\independent studies\\LIDAR\\cauaxi edited\\2012')
dat=read.csv('CAU XXX 2012 edited2.csv',as.is=T)
ind=which(colnames(dat)%in%c('xnew','ynew'))
y=data.matrix(dat[,-ind])
head(y))
head(y)
ncomm.init=10
ngibbs=10000
nburn=ngibbs/2
#priors
psi=0.01
gamma=0.1
#----------------------------------------------------------
#run LDA no covariates to get initial values
#get functions
setwd('U:\\GIT_models\\git_LDA_abundance')
source('gibbs functions.R')
source('LDA.abundance main function.R')
sourceCpp('aux1.cpp')
res=LDA.abundance(y=y,ncomm=ncomm.init,ngibbs=ngibbs,nburn=nburn,psi=psi,gamma=gamma)
rm(list=ls(all=TRUE))
set.seed(4)
nloc=5000
nspp=100
ncommun=5
base=floor(nloc/(ncommun-2))
#generate thetas
x=seq(from=-1,to=1,length.out=base)
y=sqrt(1-(x^2))*0.1
min1=0.0001
y[y<min1]=min1
# plot(x,y)
init=floor(nloc/ncommun)
seq1=c(seq(from=1,to=nloc,by=init),nloc)
theta=matrix(min1,nloc,ncommun)
for (i in 1:ncommun){
seq2=seq1[i]:(seq1[i]+base-1)
seq3=seq2[seq2<=nloc]
theta[seq3,i]=y[1:length(seq3)]
}
theta=theta/matrix(apply(theta,1,sum),nloc,ncommun)
theta.true=theta
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun) lines(1:nloc,theta[,i],col=i)
#generate phi
tmp=matrix(rnorm(ncommun*nspp,mean=0,sd=2),ncommun,nspp)
tmp[tmp<0.1]=0.1
tmp[,1:(2*ncommun)]=cbind(diag(8,ncommun))
phi=tmp/matrix(rowSums(tmp),ncommun,nspp)
round(phi[,1:20],2)
table(round(phi,2))
unique(rowSums(phi))
phi.true=phi
#generate actual observations y
nl=floor(runif(nloc,min=100,max=200))
nlk=matrix(NA,nloc,ncommun)
nks=matrix(0,ncommun,nspp)
y=matrix(NA,nloc,nspp)
for (i in 1:nloc){
nlk[i,]=rmultinom(1,size=nl[i],prob=theta[i,])
tmp1=rep(0,ncommun)
for (k in 1:ncommun){
tmp=rmultinom(1,size=nlk[i,k],prob=phi[k,])
nks[k,]=nks[k,]+tmp
tmp1=tmp1+tmp
}
y[i,]=tmp1
}
image(y)
#look at stuff to make sure it makes sense
theta.estim=nlk/matrix(nl,nloc,ncommun)
plot(NA,NA,xlim=c(1,nloc),ylim=c(0,1))
for (i in 1:ncommun) lines(1:nloc,theta.estim[,i],col=i)
nlk.true=nlk
phi.estim=nks/matrix(rowSums(nks),ncommun,nspp,)
plot(phi.true,phi.estim)
nks.true=nks
#export results
setwd('U:\\GIT_models\\git_LDA_abundance')
nome=paste('fake data',ncommun,'.csv',sep='')
colnames(y)=paste('spp',1:nspp,sep='')
rownames(y)=paste('loc',1:nloc,sep='')
write.csv(y,nome)
write.csv(phi.true,'phi true.csv',row.names=F)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\GIT_models\\git_LDA_abundance')
source('gibbs functions.R')
source('LDA.abundance main function.R')
sourceCpp('aux1.cpp')
phi=read.csv('phi true.csv',as.is=T)
nspp=ncol(y)
ncomm=5
dat=read.csv('fake data5.csv',as.is=T)
ind=which(colnames(dat)=='X')
y=data.matrix(dat[,-ind]); dim(y)
nspp=ncol(y)
ncomm=5
phi=read.csv('phi true.csv',as.is=T)
npost=1000
phi.post=matrix(unlist(phi),npost,nspp*ncomm,byrow=T)
head(phi.post[,1:5])
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\GIT_models\\git_LDA_abundance')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\GIT_models\\git_LDA_abundance\\folding')
source('folding main function.R')
dat=read.csv('fake data5.csv',as.is=T)
ind=which(colnames(dat)=='X')
y=data.matrix(dat[,-ind]); dim(y)
nspp=ncol(y)
ncomm=5
#get phi
phi=read.csv('phi true.csv',as.is=T)
npost=1000
phi.post=matrix(unlist(phi),npost,nspp*ncomm,byrow=T)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\GIT_models\\git_LDA_abundance')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\GIT_models\\git_LDA_abundance\\folding')
source('folding main function.R')
#get data
dat=read.csv('fake data5.csv',as.is=T)
ind=which(colnames(dat)=='X')
y=data.matrix(dat[,-ind]); dim(y)
nspp=ncol(y)
ncomm=5
#get phi
setwd('U:\\GIT_models\\git_LDA_abundance')
phi=read.csv('phi true.csv',as.is=T)
npost=1000
phi.post=matrix(unlist(phi),npost,nspp*ncomm,byrow=T)
y=data.matrix(dat[,-ind]); dim(y)
nspp=ncol(y)
ncomm=5
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\GIT_models\\git_LDA_abundance')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\GIT_models\\git_LDA_abundance\\folding')
source('folding main function.R')
#get data
dat=read.csv('fake data5.csv',as.is=T)
ind=which(colnames(dat)=='X')
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\GIT_models\\git_LDA_abundance')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\GIT_models\\git_LDA_abundance\\folding')
source('folding main function.R')
#get data
setwd('U:\\GIT_models\\git_LDA_abundance')
dat=read.csv('fake data5.csv',as.is=T)
ind=which(colnames(dat)=='X')
y=data.matrix(dat[,-ind]); dim(y)
nspp=ncol(y)
ncomm=5
#get phi
setwd('U:\\GIT_models\\git_LDA_abundance')
phi=read.csv('phi true.csv',as.is=T)
npost=1000
phi.post=matrix(unlist(phi),npost,nspp*ncomm,byrow=T)
rm(list=ls(all=TRUE))
setwd('U:\\uf\\courses\\bayesian course\\2021\\students enrolled')
dat=read.csv('classroll-2021-Spring-FNR6560b.csv',as.is=T)
dat$Major...Minor=gsub('Agricultural and Life Sciences - ','',dat$Major...Minor)
dat$Major...Minor=gsub('Public Health and Health Prof - ','',dat$Major...Minor)
dat$Major...Minor=gsub('Liberal Arts and Sciences - ','',dat$Major...Minor)
dat$Major...Minor=gsub('Education - ','',dat$Major...Minor)
dat$Major...Minor=gsub('Engineering - ','',dat$Major...Minor)
dat$Major...Minor=gsub('Research & Evaluatn Methodolgy and Research & Evaluatn Methodolgy',
'Research & Evaluatn Methodolgy',dat$Major...Minor)
dat$Major...Minor=gsub('Research & Evaluatn Methodolgy Statistics',
'Research & Evaluatn Methodolgy',dat$Major...Minor)
dat$Major...Minor=gsub('Psychology and Psychology',
'Psychology',dat$Major...Minor)
dat$Major...Minor=gsub('Soil and Water Sciences Fisheries and Aquatic Sciences',
'Soil and Water Sciences',dat$Major...Minor)
k=sort(table(dat$Major...Minor),decreasing=T)
k
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\GIT_models\\git_LDA_abundance')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\GIT_models\\git_LDA_abundance\\folding')
source('folding main function.R')
setwd('U:\\GIT_models\\git_LDA_abundance')
dat=read.csv('fake data5.csv',as.is=T)
ind=which(colnames(dat)=='X')
y=data.matrix(dat[,-ind]); dim(y)
nspp=ncol(y)
ncomm=5
#get phi
setwd('U:\\GIT_models\\git_LDA_abundance')
phi=read.csv('phi true.csv',as.is=T)
npost=1000
phi.post=matrix(unlist(phi),npost,nspp*ncomm,byrow=T)
#run folding operation
ngibbs=1000
nburn=ngibbs/2
gamma=0.1
nspp=ncol(y)
nloc=nrow(y)
#useful stuff
hi=0.999999
lo=0.000001
#initial values of parameters
theta=matrix(1/ncomm,nloc,ncomm)
npost=nrow(phi)
phi=matrix(phi[1,],ncomm,nspp)
theta.out=matrix(NA,ngibbs,ncomm*nloc)
llk=rep(NA,ngibbs)
# log.prior=rep(NA,ngibbs)
options(warn=2)
zeroes=array(0,dim=c(nloc,nspp,ncomm))
tmp=samplez(theta=theta, phi=phi, y=y, ncommun=ncomm, nloc=nloc, nspp=nspp, zeroes=zeroes)
array.lsk=tmp$ArrayLSK
nlk=tmp$nlk
# nlk=nlk.true
nks=tmp$nks
# nks=nks.true
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\GIT_models\\git_LDA_abundance')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\GIT_models\\git_LDA_abundance\\folding')
source('folding main function.R')
#get data
setwd('U:\\GIT_models\\git_LDA_abundance')
dat=read.csv('fake data5.csv',as.is=T)
ind=which(colnames(dat)=='X')
y=data.matrix(dat[,-ind]); dim(y)
nspp=ncol(y)
ncomm=5
#get phi
setwd('U:\\GIT_models\\git_LDA_abundance')
phi=read.csv('phi true.csv',as.is=T)
npost=1000
phi.post=matrix(unlist(phi),npost,nspp*ncomm,byrow=T)
#run folding operation
ngibbs=1000
nburn=ngibbs/2
gamma=0.1
#get data
nspp=ncol(y)
nloc=nrow(y)
#useful stuff
hi=0.999999
lo=0.000001
#initial values of parameters
theta=matrix(1/ncomm,nloc,ncomm)
npost=nrow(phi.post)
phi=matrix(phi.post[1,],ncomm,nspp)
#gibbs details
theta.out=matrix(NA,ngibbs,ncomm*nloc)
llk=rep(NA,ngibbs)
# log.prior=rep(NA,ngibbs)
options(warn=2)
zeroes=array(0,dim=c(nloc,nspp,ncomm))
tmp=samplez(theta=theta, phi=phi, y=y, ncommun=ncomm, nloc=nloc, nspp=nspp, zeroes=zeroes)
array.lsk=tmp$ArrayLSK
nlk=tmp$nlk
# nlk=nlk.true
nks=tmp$nks
dim(nlk)
theta=rdirichlet1(gamma+nlk,ncomm=ncomm,nspp=nspp)
dim(theta)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\GIT_models\\git_LDA_abundance')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\GIT_models\\git_LDA_abundance\\folding')
source('folding main function.R')
#get data
setwd('U:\\GIT_models\\git_LDA_abundance')
dat=read.csv('fake data5.csv',as.is=T)
ind=which(colnames(dat)=='X')
y=data.matrix(dat[,-ind]); dim(y)
nspp=ncol(y)
ncomm=5
#get phi
setwd('U:\\GIT_models\\git_LDA_abundance')
phi=read.csv('phi true.csv',as.is=T)
npost=1000
phi.post=matrix(unlist(phi),npost,nspp*ncomm,byrow=T)
#run folding operation
ngibbs=1000
nburn=ngibbs/2
gamma=0.1
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\GIT_models\\git_LDA_abundance')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\GIT_models\\git_LDA_abundance\\folding')
source('folding main function.R')
#get data
setwd('U:\\GIT_models\\git_LDA_abundance')
dat=read.csv('fake data5.csv',as.is=T)
ind=which(colnames(dat)=='X')
y=data.matrix(dat[,-ind]); dim(y)
nspp=ncol(y)
ncomm=5
#get phi
setwd('U:\\GIT_models\\git_LDA_abundance')
phi=read.csv('phi true.csv',as.is=T)
npost=1000
phi.post=matrix(unlist(phi),npost,nspp*ncomm,byrow=T)
#run folding operation
ngibbs=1000
nburn=ngibbs/2
gamma=0.1
res=folding.in(y=y,ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,phi.post=phi.post,gamma=gamma)
ncomm
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\GIT_models\\git_LDA_abundance')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\GIT_models\\git_LDA_abundance\\folding')
source('folding main function.R')
#get data
setwd('U:\\GIT_models\\git_LDA_abundance')
dat=read.csv('fake data5.csv',as.is=T)
ind=which(colnames(dat)=='X')
y=data.matrix(dat[,-ind]); dim(y)
nspp=ncol(y)
ncomm=5
#get phi
setwd('U:\\GIT_models\\git_LDA_abundance')
phi=read.csv('phi true.csv',as.is=T)
npost=1000
phi.post=matrix(unlist(phi),npost,nspp*ncomm,byrow=T)
#run folding operation
ngibbs=1000
nburn=ngibbs/2
gamma=0.1
nspp=ncol(y)
nloc=nrow(y)
#useful stuff
hi=0.999999
lo=0.000001
#initial values of parameters
theta=matrix(1/ncomm,nloc,ncomm)
npost=nrow(phi.post)
oo=1
phi=matrix(phi.post[oo,],ncomm,nspp)
#gibbs details
theta.out=matrix(NA,ngibbs,ncomm*nloc)
llk=rep(NA,ngibbs)
# log.prior=rep(NA,ngibbs)
options(warn=2)
zeroes=array(0,dim=c(nloc,nspp,ncomm))
tmp=samplez(theta=theta, phi=phi, y=y, ncommun=ncomm, nloc=nloc, nspp=nspp, zeroes=zeroes)
array.lsk=tmp$ArrayLSK
nlk=tmp$nlk
# nlk=nlk.true
nks=tmp$nks
# nks=nks.true
#get parameters
theta=rdirichlet1(gamma+nlk,ncomm=ncomm,nspp=nspp)
# theta[theta>hi]=hi; theta[theta<lo]=lo
# theta=theta.true
phi=matrix(phi.post[oo,],ncomm,nspp)
oo=oo+1
if (oo==npost) oo=1
# phi[phi>hi]=hi; phi[phi<lo]=lo
# phi=phi.true
#calculate loglikelihood
prob=theta%*%phi
dim(theta)
dim(nlk)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\GIT_models\\git_LDA_abundance')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\GIT_models\\git_LDA_abundance\\folding')
source('folding main function.R')
#get data
setwd('U:\\GIT_models\\git_LDA_abundance')
dat=read.csv('fake data5.csv',as.is=T)
ind=which(colnames(dat)=='X')
y=data.matrix(dat[,-ind]); dim(y)
nspp=ncol(y)
ncomm=5
#get phi
setwd('U:\\GIT_models\\git_LDA_abundance')
phi=read.csv('phi true.csv',as.is=T)
npost=1000
phi.post=matrix(unlist(phi),npost,nspp*ncomm,byrow=T)
#run folding operation
ngibbs=1000
nburn=ngibbs/2
gamma=0.1
#get data
nspp=ncol(y)
nloc=nrow(y)
#useful stuff
hi=0.999999
lo=0.000001
#initial values of parameters
theta=matrix(1/ncomm,nloc,ncomm)
npost=nrow(phi.post)
oo=1
phi=matrix(phi.post[oo,],ncomm,nspp)
#gibbs details
theta.out=matrix(NA,ngibbs,ncomm*nloc)
llk=rep(NA,ngibbs)
# log.prior=rep(NA,ngibbs)
options(warn=2)
zeroes=array(0,dim=c(nloc,nspp,ncomm))
for (i in 1:ngibbs){
print(i)
#sample z
tmp=samplez(theta=theta, phi=phi, y=y, ncommun=ncomm, nloc=nloc, nspp=nspp, zeroes=zeroes)
array.lsk=tmp$ArrayLSK
nlk=tmp$nlk
# nlk=nlk.true
nks=tmp$nks
# nks=nks.true
#get parameters
theta=rdirichlet2(gamma+nlk,nloc=nloc,ncomm=ncomm)
# theta[theta>hi]=hi; theta[theta<lo]=lo
# theta=theta.true
phi=matrix(phi.post[oo,],ncomm,nspp)
oo=oo+1
if (oo==npost) oo=1
# phi[phi>hi]=hi; phi[phi<lo]=lo
# phi=phi.true
#calculate loglikelihood
prob=theta%*%phi
prob[prob>hi]=hi; prob[prob<lo]=lo
#calculate log prior (I often get Inf!!)
# vmat1=vmat[,-ncomm]
# vmat1[vmat1>hi]=hi; vmat1[vmat1<lo]=lo
# log.p.betas=sum(dbeta(vmat1,1,gamma,log=T))
# log.p.phi=sum(log(ddirichlet(phi,rep(psi,nspp))))
# print(c(log.p.betas,log.p.phi))
#store results
llk[i]=sum(y*log(prob))
# log.prior[i]=log.p.betas+log.p.phi
theta.out[i,]=theta
}
head(theta)
apply(theta,1,sum)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(4)
#get functions
setwd('U:\\GIT_models\\git_LDA_abundance')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\GIT_models\\git_LDA_abundance\\folding')
source('folding main function.R')
#get data
setwd('U:\\GIT_models\\git_LDA_abundance')
dat=read.csv('fake data5.csv',as.is=T)
ind=which(colnames(dat)=='X')
y=data.matrix(dat[,-ind]); dim(y)
nspp=ncol(y)
ncomm=5
#get phi
setwd('U:\\GIT_models\\git_LDA_abundance')
phi=read.csv('phi true.csv',as.is=T)
npost=1000
phi.post=matrix(unlist(phi),npost,nspp*ncomm,byrow=T)
#run folding operation
ngibbs=1000
nburn=ngibbs/2
gamma=0.1
res=folding.in(y=y,ncomm=ncomm,ngibbs=ngibbs,nburn=nburn,phi.post=phi.post,gamma=gamma)
plot(res$llk,type='l')
seq1=1:nrow(res$theta)
theta=colMeans(res$theta[seq1,])
theta1=matrix(theta,nrow(y),ncomm)
boxplot(theta1)
plot(NA,xlim=c(0,nrow(y)),ylim=c(0,1))
for (i in 1:ncomm){
lines(theta1[,i],col=i)
}
